from pydantic import BaseModel, Field, EmailStr, root_validator
from typing import Optional, Dict, List
from bson import ObjectId
from datetime import datetime, timedelta
import secrets
import string


class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v, field=None):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return ObjectId(v)

    @classmethod
    def __get_pydantic_json_schema__(cls, field_schema):
        field_schema.update(type="string")


class SecurityUser(BaseModel):
    """Security-related user data stored in Security service"""
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    user_id: str  # Reference to user in Users Dblock
    email: EmailStr
    phone: str
    password_hash: str
    role: str = "user"
    is_active: bool = True
    last_login: Optional[datetime] = None
    failed_login_attempts: int = 0
    password_reset_token: Optional[str] = None
    two_factor_enabled: bool = False
    permissions: list = []
    approved: bool = False
    profile_picture_url: Optional[str] = None
    full_name: Optional[str] = None

    @root_validator(pre=True)
    def enforce_approved_based_on_role(cls, values):
        role = values.get("role")
        approved = values.get("approved", False)
        if role == "admin":
            values["approved"] = True
        return values
    
    class Config:
        validate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class UserProfile(BaseModel):
    """User profile data stored in Users Dblock"""
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    user_id: str
    full_name: str
    email: str
    password: str
    role: str
    phoneNo: Optional[str] = None
    details: Optional[Dict[str, str]] = {}
    preferences: Dict = {
        "theme": "light",
        "animations": "true",
        "email_alerts": "true",
        "push_notifications": "true",
        "two_factor": "false",
        "activity_log": "true",
        "session_timeout": "30 minutes",
        "dashboard_layout": "%7B%22widgets%22%3A%5B%7B%22id%22%3A%22widget_23ba593d3c63a399b2095570fea6aa1d%22%2C%22type%22%3A%22tracking_map%22%2C%22config%22%3A%7B%22title%22%3A%22tracking_map%22%7D%7D%2C%7B%22id%22%3A%22widget_474da9b9d8015c036d5d66c688c03219%22%2C%22type%22%3A%22plugin_health%22%2C%22config%22%3A%7B%22title%22%3A%22System%20Health%22%7D%7D%2C%7B%22id%22%3A%22widget_c5ecfb711b9871b95b2322b347c08010%22%2C%22type%22%3A%22vehicle_status_bar_chart%22%2C%22config%22%3A%7B%22title%22%3A%22Vehicle%20Status%20Bar%20Chart%22%7D%7D%2C%7B%22id%22%3A%22widget_ec77f7c8eb5ef0c6575d9f5740dbd27b%22%2C%22type%22%3A%22my_notifications%22%2C%22config%22%3A%7B%22title%22%3A%22My%20Notifications%22%7D%7D%5D%2C%22layout%22%3A%5B%7B%22i%22%3A%22widget_23ba593d3c63a399b2095570fea6aa1d%22%2C%22x%22%3A0%2C%22y%22%3A0%2C%22w%22%3A40%2C%22h%22%3A8%7D%2C%7B%22i%22%3A%22widget_474da9b9d8015c036d5d66c688c03219%22%2C%22x%22%3A0%2C%22y%22%3A8%2C%22w%22%3A10%2C%22h%22%3A6%7D%2C%7B%22i%22%3A%22widget_c5ecfb711b9871b95b2322b347c08010%22%2C%22x%22%3A10%2C%22y%22%3A8%2C%22w%22%3A10%2C%22h%22%3A6%7D%2C%7B%22i%22%3A%22widget_ec77f7c8eb5ef0c6575d9f5740dbd27b%22%2C%22x%22%3A20%2C%22y%22%3A8%2C%22w%22%3A10%2C%22h%22%3A6%7D%5D%2C%22isEditing%22%3Afalse%2C%22lastSaved%22%3A%222025-09-15T11%3A13%3A08.495Z%22%2C%22version%22%3A%221.0%22%7D"#default layout
    }
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        validate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class UserCreatedMessage(BaseModel):
    user_id: str
    full_name: str
    phoneNo: Optional[str] = None
    details: Dict = {}
    preferences: Dict = {}


class UserUpdatedMessage(BaseModel):
    user_id: str
    updates: Dict


class UserDeletedMessage(BaseModel):
    user_id: str


import secrets
import string
from datetime import datetime, timedelta


class UserInvitation(BaseModel):
    """User invitation model for OTP-based user activation"""
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    email: EmailStr
    full_name: str
    role: str
    phone_number: Optional[str] = None
    otp: str = Field(default="")  # Will be generated by service
    invited_by: str  # user_id of admin/fleet_manager who sent the invitation
    status: str = "invited"  # invited, activated, expired, cancelled
    created_at: datetime = Field(default_factory=datetime.utcnow)
    expires_at: datetime = Field(default_factory=lambda: datetime.utcnow() + timedelta(hours=24))
    activation_attempts: int = 0
    max_attempts: int = 3
    last_otp_sent: Optional[datetime] = None
    resend_count: int = 0
    max_resends: int = 5
    
    # Email status tracking
    email_status: str = "sent"  # sent, pending_retry, failed
    retry_count: int = 0
    max_retries: int = 10
    next_retry: Optional[datetime] = None
    last_error: Optional[str] = None
    
    class Config:
        validate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}

    def generate_otp(self) -> str:
        """Generate a new 6-digit OTP"""
        self.otp = ''.join(secrets.choice(string.digits) for _ in range(6))
        return self.otp

    def is_expired(self) -> bool:
        return datetime.utcnow() > self.expires_at
    
    def is_valid_for_activation(self) -> bool:
        return (
            self.status == "invited" and 
            not self.is_expired() and 
            self.activation_attempts < self.max_attempts
        )

    def can_resend_otp(self) -> bool:
        """Check if OTP can be resent"""
        if self.resend_count >= self.max_resends:
            return False
        if self.last_otp_sent:
            # Prevent spam - minimum 1 minute between resends
            time_since_last = datetime.utcnow() - self.last_otp_sent
            return time_since_last.total_seconds() >= 60
        return True

    def increment_attempts(self):
        """Increment activation attempts"""
        self.activation_attempts += 1

    def mark_otp_sent(self):
        """Mark that OTP was sent"""
        self.last_otp_sent = datetime.utcnow()
        self.resend_count += 1
