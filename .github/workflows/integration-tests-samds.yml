name: Integration Tests via SAMDS

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (full, python-only, frontend-only, quick)'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - python-only
        - frontend-only  
        - quick
      show_logs:
        description: 'Show service logs'
        required: false
        default: true
        type: boolean
      cleanup:
        description: 'Cleanup containers after tests'
        required: false
        default: true
        type: boolean

concurrency:
  group: integration-tests-samds-${{ github.ref }}
  cancel-in-progress: true

jobs:
  trigger-integration-tests:
    name: Trigger Remote Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    env:
      SAMDS_ENDPOINT: ${{ secrets.SAMDS_ENDPOINT }}
      SAMDS_API_KEY: ${{ secrets.SAMDS_API_KEY }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate SAMDS configuration
        run: |
          if [ -z "$SAMDS_API_KEY" ]; then
            echo "‚ùå SAMDS_API_KEY secret is required"
            exit 1
          fi
          
          if [ -z "$SAMDS_ENDPOINT" ]; then
            echo "‚ùå SAMDS_ENDPOINT is not configured"
            exit 1
          fi
          
          echo "‚úÖ SAMDS configuration validated"
          echo "SAMDS URL: $SAMDS_ENDPOINT"

      - name: Check SAMDS health
        run: |
          echo "Checking SAMDS health..."
          response=$(curl -s -w "%{http_code}" -o /tmp/health_response.json "$SAMDS_ENDPOINT/" || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ SAMDS is healthy"
            cat /tmp/health_response.json
          else
            echo "‚ùå SAMDS health check failed (HTTP $response)"
            if [ -f /tmp/health_response.json ]; then
              cat /tmp/health_response.json
            fi
            exit 1
          fi

      - name: Prepare test configuration
        id: test_config
        run: |
          # Prepare test configuration based on inputs
          TEST_MODE="${{ github.event.inputs.test_mode || 'full' }}"
          SHOW_LOGS="${{ github.event.inputs.show_logs || 'true' }}"
          CLEANUP="${{ github.event.inputs.cleanup || 'true' }}"
          
          # Create JSON payload
          cat > test_config.json << EOF
          {
            "test_mode": "$TEST_MODE",
            "show_logs": $(echo $SHOW_LOGS | tr '[:upper:]' '[:lower:]'),
            "cleanup": $(echo $CLEANUP | tr '[:upper:]' '[:lower:]'),
            "timeout": 3600,
            "trigger_info": {
              "github_run_id": "${{ github.run_id }}",
              "github_ref": "${{ github.ref }}",
              "github_sha": "${{ github.sha }}",
              "github_actor": "${{ github.actor }}",
              "github_event_name": "${{ github.event_name }}"
            }
          }
          EOF
          
          echo "Test configuration:"
          cat test_config.json
          
          # Set outputs for use in next steps
          echo "test_mode=$TEST_MODE" >> $GITHUB_OUTPUT
          echo "show_logs=$SHOW_LOGS" >> $GITHUB_OUTPUT
          echo "cleanup=$CLEANUP" >> $GITHUB_OUTPUT

      - name: Trigger integration tests on SAMDS
        id: run_tests
        run: |
          echo "üöÄ Triggering integration tests on SAMDS..."
          echo "Mode: ${{ steps.test_config.outputs.test_mode }}"
          echo "Show Logs: ${{ steps.test_config.outputs.show_logs }}"
          echo "Cleanup: ${{ steps.test_config.outputs.cleanup }}"
          
          # Call SAMDS integration test endpoint
          response=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Authorization: Bearer $SAMDS_API_KEY" \
            -H "Content-Type: application/json" \
            -d @test_config.json \
            -o test_results.json \
            "$SAMDS_ENDPOINT/run-integration-tests")
          
          echo "HTTP Response Code: $response"

          if [ "$response" = "$response" ]; then
            echo "‚úÖ Integration tests completed successfully"
            SUCCESS="true"
          elif [ "$response" = "500" ]; then
            echo "‚ö†Ô∏è Integration tests completed with issues"
            SUCCESS="false"
          else
            echo "‚ùå Failed to trigger integration tests (HTTP $response)"
            SUCCESS="false"
          fi
          
          # Output results for debugging
          echo "Test Results:"
          if [ -f test_results.json ]; then
            cat test_results.json | jq . || cat test_results.json
          fi
          
          # Set output for next steps
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT

      - name: Parse and display test results
        if: always()
        run: |
          if [ -f test_results.json ]; then
            echo "## üìã Integration Test Results" >> $GITHUB_STEP_SUMMARY
            
            # Extract key information using jq if available, fallback to grep
            if command -v jq > /dev/null; then
              SUCCESS=$(jq -r '.success // "unknown"' test_results.json)
              DURATION=$(jq -r '.duration_seconds // "unknown"' test_results.json)
              EXIT_CODE=$(jq -r '.exit_code // "unknown"' test_results.json)
              
              echo "- **Status**: $SUCCESS" >> $GITHUB_STEP_SUMMARY
              echo "- **Duration**: ${DURATION}s" >> $GITHUB_STEP_SUMMARY
              echo "- **Exit Code**: $EXIT_CODE" >> $GITHUB_STEP_SUMMARY
              
              # Test results summary
              OVERALL_STATUS=$(jq -r '.test_results.overall_status // "unknown"' test_results.json)
              TOTAL_TESTS=$(jq -r '.test_results.summary.total_tests // 0' test_results.json)
              PASSED_TESTS=$(jq -r '.test_results.summary.passed // 0' test_results.json)
              FAILED_TESTS=$(jq -r '.test_results.summary.failed // 0' test_results.json)
              
              echo "- **Overall Status**: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
              echo "- **Total Tests**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
              echo "- **Passed**: $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
              echo "- **Failed**: $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
            else
              echo "Raw test results (jq not available):" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              head -50 test_results.json >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå No test results file found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ github.run_id }}
          path: |
            test_results.json
            test_config.json
          retention-days: 30

      - name: Set final status
        if: always()
        run: |
          if [ "${{ steps.run_tests.outputs.success }}" = "true" ]; then
            echo "‚úÖ Integration tests passed"
            exit 0
          else
            echo "‚ùå Integration tests failed or had issues"
            exit 1
          fi

  notify-status:
    name: Notify Test Status
    runs-on: ubuntu-latest
    needs: trigger-integration-tests
    if: always()
    
    steps:
      - name: Notify success
        if: needs.trigger-integration-tests.result == 'success'
        run: |
          echo "üéâ Integration tests completed successfully!"
          echo "All tests passed via SAMDS remote execution."

      - name: Notify failure
        if: needs.trigger-integration-tests.result != 'success'
        run: |
          echo "üí• Integration tests failed or were cancelled."
          echo "Check the test results and SAMDS logs for details."
          echo "Result: ${{ needs.trigger-integration-tests.result }}"