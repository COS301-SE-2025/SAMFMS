name: CI

on:
  push:
    branches:
      - main

# Stop overlapping runs on main (saves minutes)
concurrency:
  group: ci-main
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 4        # hard cap on runner time

    steps:
    # 0. Checkout the code
    - uses: actions/checkout@v4

    # 1. Enable Buildx (BuildKit) for fast, cache-aware builds
    - uses: docker/setup-buildx-action@v3

    # 2. Restore the layer-cache from the previous run
    - name: Restore buildx cache
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # 3. Build *only* what the tests need, spin up the stack & wait
    - name: Build images + start services
      run: |
        docker compose -f docker-compose.test.yml \
          build --pull \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to   type=local,dest=/tmp/.buildx-cache-new,mode=max

        docker compose -f docker-compose.test.yml \
          up -d --wait --wait-timeout 60


    # 4. Run the actual unit-tests
    - name: Run pytest
      run: |
        docker compose -f docker-compose.test.yml \
          run --rm api pytest --disable-warnings --tb=no

    # 5. Rotate the layer cache for the next workflow run
    - name: Save updated cache
      if: always()
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # 6. (Optional) free runner disk before the VM is torn down
    - name: Final docker cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v --remove-orphans
        docker system prune -af